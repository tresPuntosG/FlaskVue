EJERCICIO FLASK + VUE
CODO    Prof Juan Chemello 
Video en YT Full Stack Python – Com #2176 – Clase #33


PYTHON
Verificacion:
Comprobar instalación Python  y  pip (package Installer for Pyhon   equiv a  npm) :
Desde consola (CMD)
Python –versión  (python 3.9.4 …)
pip –version  (pip 20.2.3 …)      ó  Python -m pip –version
si esta instalado pero no lo reconoce, falta la variable de entorno
cualquier problema    pip install …
probar    pip list     muestra librerías instaladas y versiones



VIRTUALENV
Instalacion:
Se instala con:   pip install virtualenvo si ya esta instalado:    virtualenv –version
[ Python, pip y virtualenv  SE INSTALAN GLOBALMENTE ]
En la carpeta del proyecto:
python -m venv .env
esto crea en entorno virtual   \.env   en la carpeta (scripts, llib …)
ya esta una versión de Python +pip incluida

Activacion:
-	 Si da error porque no esta permitida la ejecución de scripts: 
-	Abrir Windows PowerShell como Administrador (click derecho en ventanasWindows)
-	get-executionpolicy -list   (vemos las políticas de ejecución actuales)
-	hay que habilitar   LocalMachine:
-	Set-ExecutionPolicy RemoteSigned -Force
-	Para cambiar MachinePolicy se hace desde  gpedit,msc:
-	Abrir Windows+R (Ejecutar)
-	Gpedit.msc
-	Plantillas administrativas
-	Componentes de Windows
-	Windows PowerShell
-	Activar ejecución de Scripts – doble click 
-	Habilitar
-	En Directiva  Permitir solo scripts firmados

SI HAY UN ARCHIVO  .PY  DENTRO DE LA CARPETA DE TRABAJO Y UN ENTORNO VIRTUAL CREADO, VSC AL ABRIR TERMINAL ACTIVA AUTOMATICAMENTE ESE ENTORNO VIRTUAL

Activacion  “directa”  desde terminal:
	Cd  .env\scripts
activate (.bat)    
Desactivacion:   deactivate


LA ACTIVACION DEL ENTORNO VIRTUAL ES POR TERMINAL, NO POR CARPETA (AL ABRIR OTRO TERMINAL ESTA DESACTIVADO )


Acá se instalan todas las dependencias / versiones para este proyecto, sin afectar a otros o las versiones instaladas en la raiz de la compu



GIT
Debemos tener configurado en GIT nuestro nombre y correo electrónico, lo verificamos con:
git config --global -l
user.name=pepeGanga
user.email=pepe@ganga.com

INICIALIZAR REPOSITORIO:
Git init  (se cambian colores…)
VSC nos muestra que hay  miles de archivos sin seguimiento …
Para evitar que GIT suba al repositorio todo el entorno virtual:
Creamos el    .gitignore
Ponemos todo lo que no se debe subir a git:
.env
Quedan 2 archivos en seguimiento (U) ,  app.py  y  gitignore   OK
Verificamos con   git status 

Defino las LIBRERIAS que necesito:
Pip install flask
Verificamos con  pip list

Agregamos   
Pip install flask-mysql


DEBEMOS CREAR ARCHIVO CON LAS LIBRERIAS QUE USA EL PROYECTO:
Vemos con    pip freeze    esas librerías:
CREAMOS EL   requirements.txt:
Pip freeze > requirements.txt
Verificamos ese .txt, contiene lo mismo que  freeze

Ahora, si (alguien/nosotros) descargamos el proyecto de git  solo tendremos 3 archivos, uno de ellos requirements.txt, 

Podemos probar  BORRANDO  .env 
Y creando entorno virtual  nuevamente con
Python -m venv .env  (-m  de  modulo)
Con pip list  vemos que solo hay un par de librerías
Para instalar todas :
pip install -r requirements.txt   (-r  instala librerías de un archivo requirements)
Se instalan las librerías Y VERSIONES de requirements. 



MARCAR CAMBIOS PARA LUEGO COMMIT:
desde VSC con el +  en  control codigo fuente  marco c/u  o todos, pasan de  (U  untrucked) a  (A  indice  añadido)

Puedo ir agregando un MENSAJE por archivo o varios  en cuadro mensaje "se agrega gitignore al proyecto -p ej-   CTRL+ENTER  o tilde

SI DA ERROR PQ FALTA   user.name  o  user.email  EN git:
git config user.email pepe@ganga.com 

ASI SE GUARDA ESTA CONFIGURACION PARA ESTE PROYECTO, PARA GUARDARLO EN TODOS ES IGUAL CON  --global

PUEDE SER BUENA IDEA DEJAR CONFIGURADO NOMBRE (NO CAMBIA) PERO NO CORREO, POR SI SE USA UNO DISTINTO PARA DIREFERENTES EMPRESAS / LUGARES


Con  git log    vemos los commits hechos
Con git status  verificamos cambios / pendientes de seguir / subir

PARA VER MEJOR TODO ESTO HAY UNA EXTENSION DE VSC   GitLens
agrega ventana de LINEA DE TIEMPO en VSC con   cambios pendientes  y  commits hechos...


En GITHUB.COM: 
nuevo repositorio  (nombre) -  descripcion - gitignore no (ya esta) - publico/privado - readme... - 
proyectoFlaskVue

copiar los comandos ... push an existing repository from te command line 

git remote add origin https://github.com/tresPuntosG/proyectoFlaskVue.git

luego desde terminal ejecutarlos (de a UNO)
verificamos con    git remote
origin   OK

Cambiamos nombre rama master a main: (por defecto GIT llama  master a la rama ppal cuando creamos repositorio)
git branch -M main

git push -u origin main  (-u = set--upstream  -->  sube la rama local a repositorio)

PARA REVISAR SI HAY CAMBIOS EN EL REPOSITORIO REMOTO:
git fetch origin
